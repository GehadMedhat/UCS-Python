import heapq

def ucs(graph, start, goal):
    visited = set()
    pq = [(0, start)]
    parent = {}

    while pq:
        cost, node = heapq.heappop(pq)

        if node in visited:
            continue

        visited.add(node)

        if node == goal:
            path = []
            while node:
                path.append(node)
                node = parent.get(node)
            return path[::-1]

        for neighbor, neighbor_cost in graph[node]:
            if neighbor not in visited:
                new_cost = cost + neighbor_cost
                heapq.heappush(pq, (new_cost, neighbor))
                parent[neighbor] = node

    return None

# Example usage
graph = {
    'A': [('B', 1), ('C', 4)],
    'B': [('D', 2), ('E', 3)],
    'C': [('E', 1)],
    'D': [('F', 4)],
    'E': [('F', 1)],
    'F': []
}

start = 'A'
goal = 'F'

path = ucs(graph, start, goal)
if path:
    print("Shortest path:", path)
else:
    print("No path found.")
